<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lmt.mbsp.user.dao.mapper.group.GroupMapper">
  <resultMap id="BaseResultMap" type="com.lmt.mbsp.user.entity.group.Group">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="group_id" jdbcType="BIGINT" property="groupId" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="code_path" jdbcType="VARCHAR" property="codePath" />
    <result column="organization_code" jdbcType="VARCHAR" property="organizationCode" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="typ" jdbcType="INTEGER" property="typ" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="audit_state" jdbcType="INTEGER" property="auditState" />
  </resultMap>

  <resultMap id="GroupTree" type="com.lmt.mbsp.user.entity.group.Group">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="group_id" jdbcType="BIGINT" property="groupId" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="code_path" jdbcType="VARCHAR" property="codePath" />
    <result column="organization_code" jdbcType="VARCHAR" property="organizationCode" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="typ" jdbcType="INTEGER" property="typ" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="audit_state" jdbcType="INTEGER" property="auditState" />
    <collection column="id" property="childrenList" ofType="Group" javaType="java.util.ArrayList" select="selectGroupChildrenById"/>
  </resultMap>

  <resultMap id="ParentGroupTree" type="com.lmt.mbsp.user.entity.group.Group">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="group_id" jdbcType="BIGINT" property="groupId" />
    <result column="pid" jdbcType="BIGINT" property="pid" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="code_path" jdbcType="VARCHAR" property="codePath" />
    <result column="organization_code" jdbcType="VARCHAR" property="organizationCode" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="typ" jdbcType="INTEGER" property="typ" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="audit_state" jdbcType="INTEGER" property="auditState" />
    <collection column="pid" property="parent" ofType="Group" select="selectGroupParentById"/>
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_group
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insert" parameterType="com.lmt.mbsp.user.entity.group.Group">
    insert into t_group (code, create_time,
      `name`, state, typ,
      code_path, organization_code, pid,
      group_id, grade, audit_state
      )
    values (#{code,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{name,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{typ,jdbcType=INTEGER},
      #{codePath,jdbcType=VARCHAR}, #{organizationCode,jdbcType=VARCHAR}, #{pid,jdbcType=BIGINT},
      #{groupId,jdbcType=BIGINT}, #{grade,jdbcType=BIGINT}, #{auditState,jdbcType=INTEGER})
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.lmt.mbsp.user.entity.group.Group">
    update t_group
    set code = #{code,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      name = #{name,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      typ = #{typ,jdbcType=INTEGER},
      code_path = #{codePath,jdbcType=VARCHAR},
      organization_code = #{organizationCode,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=BIGINT},
      group_id = #{groupId,jdbcType=BIGINT},
      grade = #{grade,jdbcType=BIGINT},
      audit_state = #{auditState,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select <include refid="selFields"/>
    from t_group
    where id = #{id,jdbcType=BIGINT}
  </select>

  <!--根据公司ID+部门名称查询该部门是否已经存在-->
  <select id="selectByGroupIdAndName" parameterType="java.util.Map" resultMap="BaseResultMap" >
    select <include refid="selFields"/>
    from t_group
    where `name` = #{name,jdbcType=VARCHAR} AND group_id = #{groupId,jdbcType=BIGINT} AND grade=1 AND typ=0
  </select>

  <!--根据公司名称查询该公司是否已经存在-->
  <select id="selectByGroupName" parameterType="java.lang.String" resultMap="BaseResultMap" >
    select <include refid="selFields"/>
    from t_group
    where `name` = #{name,jdbcType=VARCHAR} AND grade=0 AND typ=0
  </select>

  <!--根据父级部门ID查询当前最大编码-->
  <select id="selectMaxCodeByPid" parameterType="java.lang.Long" resultType="java.lang.String" >
    select max(code)
    from t_group
    where pid = #{pid,jdbcType=BIGINT} AND grade=1 AND typ=0
  </select>

  <!-- 这里的返回结果必须为resultMap，并且值为上面构建的resultMap的id的值 -->
  <select id="selectSonTreeById" parameterType="java.lang.Long" resultMap="GroupTree" >
    select <include refid="selFields"/>
    from t_group
    where id = #{id,jdbcType=BIGINT}
    ORDER BY code ASC
  </select>

  <!-- 再利用上次查询结果colliection中column的值id做递归查询，查出所有子菜单 -->
  <!-- 这里的返回结果必须为resultMap，并且值为上面构建的resultMap的id的值 -->
  <select id="selectGroupChildrenById" resultMap="GroupTree" parameterType="java.lang.Long">
    select <include refid="selFields"/>
    from t_group
    where pid = #{id}
  </select>

  <!-- 这里的返回结果必须为resultMap，并且值为上面构建的resultMap的id的值 -->
  <select id="selectParentTreeById" parameterType="java.lang.Long" resultMap="ParentGroupTree" >
    select <include refid="selFields"/>
    from t_group
    where id = #{id,jdbcType=BIGINT}
    ORDER BY code ASC
  </select>

  <select id="selectGroupParentById" resultMap="ParentGroupTree" parameterType="Long">
    select <include refid="selFields"/>
    from t_group
    where id = #{pid}
  </select>

  <select id="selectSingle" parameterType="com.lmt.mbsp.user.entity.group.Group" resultMap="BaseResultMap">
    select <include refid="selFields"/>
    from t_group
    <include refid="paramSql"/>
  </select>

  <select id="selectAll" resultMap="BaseResultMap" parameterType="com.lmt.mbsp.user.entity.group.Group">
    select <include refid="selFields"/>
    from t_group
    <include refid="paramSql"/>
    <choose>
      <when test="sortName != null">
        ORDER BY #{sortName}
        <choose>
          <when test="sortType == 0">ASC</when>
          <otherwise>DESC</otherwise>
        </choose>
      </when>
      <otherwise>ORDER BY id DESC</otherwise>
    </choose>
  </select>

  <select id="count" parameterType="com.lmt.mbsp.user.entity.group.Group" resultType="java.lang.Integer">
    select count(*)
    from t_group
    <include refid="paramSql"/>
  </select>

  <!--查询返回字段-->
  <sql id="selFields">id, pid, group_id, code, create_time, `name`, state, audit_state, typ, grade, code_path, organization_code</sql>

  <!--查询参数-->
  <sql id="paramSql">
    <where>
      <if test="id != null">AND id=#{id,jdbcType=BIGINT}</if>
      <if test="pid != null">AND pid=#{pid,jdbcType=BIGINT}</if>
      <if test="groupId != null">AND group_id=#{groupId,jdbcType=BIGINT}</if>
      <if test="code != null">AND code=#{code,jdbcType=VARCHAR}</if>
      <if test="codePath != null">AND code_path like '%' #{codePath,jdbcType=VARCHAR} '%'</if>
      <if test="state != null">AND state=#{state,jdbcType=INTEGER}</if>
      <if test="auditState != null">AND audit_state=#{auditState,jdbcType=INTEGER}</if>
      <if test="typ != null">AND typ=#{typ,jdbcType=INTEGER}</if>
      <if test="grade != null">AND grade=#{grade,jdbcType=INTEGER}</if>
      <if test="name != null">AND `name` like '%'#{name,jdbcType=VARCHAR} '%'</if>
      <if test="codes != null">
        AND
        <foreach collection="codes" item="code" open="(" close=")" separator="or">
          code = #{code,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="ids != null and ids.size() > 0">
        AND
        <foreach collection="ids" item="id" open="(" close=")" separator="or">
          id = #{id,jdbcType=BIGINT}
        </foreach>
      </if>
    </where>
  </sql>


</mapper>